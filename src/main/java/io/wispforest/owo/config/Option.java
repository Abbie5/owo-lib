package io.wispforest.owo.config;

import io.wispforest.owo.Owo;
import io.wispforest.owo.util.Observable;
import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;

// TODO docs
public record Option<T>(
        String configName,
        Key key,
        T defaultValue,
        Observable<T> events,
        BoundField<T> backingField,
        @Nullable ConfigWrapper.Constraint constraint
) {

    public void set(T value) {
        if (!this.verifyConstraint(value)) return;

        this.backingField.setValue(value);
        this.events.set(value);
    }

    public T value() {
        return this.events.get();
    }

    @SuppressWarnings("unchecked")
    public Class<T> clazz() {
        return (Class<T>) this.backingField.field().getType();
    }

    public void synchronizeWithBackingField() {
        final var fieldValue = (T) this.backingField.getValue();
        if (verifyConstraint(fieldValue)) {
            this.events.set(fieldValue);
        } else {
            this.backingField.setValue(this.events.get());
        }
    }

    public boolean verifyConstraint(T value) {
        if (constraint == null) return true;

        final var matched = constraint.test(value);
        if (!matched) {
            Owo.LOGGER.warn(
                    "Option {} in config '{}' could not be updated, as the given value '{}' does not match its constraint: {}",
                    key, configName, value, constraint.formatted()
            );
        }

        return matched;
    }

    public String translationKey() {
        return "text.config." + this.configName + ".option." + this.key.asString();
    }

    public record Key(String[] path) {

        public static final Key ROOT = new Key(new String[0]);

        public Key(List<String> path) {
            this(path.toArray(String[]::new));
        }

        public Key(String key) {
            this(key.split("\\."));
        }

        public Key parent() {
            if (this.path.length < 2) return ROOT;

            var newPath = new String[this.path.length - 1];
            System.arraycopy(this.path, 0, newPath, 0, this.path.length - 1);
            return new Key(newPath);
        }

        public Key child(String childName) {
            var newPath = new String[this.path.length + 1];
            System.arraycopy(this.path, 0, newPath, 0, this.path.length);
            newPath[this.path.length] = childName;
            return new Key(newPath);
        }

        public String asString() {
            return String.join(".", this.path);
        }

        public int nestDepth() {
            return Math.max(0, this.path.length - 1);
        }

        public String name() {
            if (this.path.length < 1) return "";
            return this.path[this.path.length - 1];
        }

        public boolean isRoot() {
            return this == ROOT;
        }

        // Records don't play nicely with arrays, thus need to manually
        // declare all the record autogenerated stuff here

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Key key = (Key) o;
            return Arrays.equals(path, key.path);
        }

        @Override
        public int hashCode() {
            return Arrays.hashCode(path);
        }

        @Override
        public String toString() {
            return "Key{" + "path=" + Arrays.toString(path) + '}';
        }
    }

    @SuppressWarnings("unchecked")
    public record BoundField<T>(Object owner, Field field) {
        public T getValue() {
            try {
                return (T) this.field.get(this.owner);
            } catch (IllegalAccessException e) {
                throw new RuntimeException("Could not access config option field " + field.getName(), e);
            }
        }

        public void setValue(T value) {
            try {
                this.field.set(this.owner, value);
            } catch (IllegalAccessException e) {
                throw new RuntimeException("Could not set config option field " + field.getName(), e);
            }
        }
    }
}
